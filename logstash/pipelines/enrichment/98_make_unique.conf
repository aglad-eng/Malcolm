# Copyright (c) 2022 Battelle Energy Alliance, LLC.  All rights reserved.

filter {

  # all hashed values #########################################################
  if ([related][hash]) {
    ruby {
      id => "ruby_related_hash_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][hash]"
      }
    }
  }

  # all host identifiers #########################################################
  if ([related][hosts]) {
    ruby {
      id => "ruby_related_hosts_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][hosts]"
      }
    }
  }

  # all IP addresses ##########################################################
  if ([related][ip]) {
    ruby {
      id => "ruby_related_ip_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][ip]"
      }
    }
  }

  # all MAC addresses #########################################################
  if ([related][mac]) {
    ruby {
      id => "ruby_related_mac_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][mac]"
      }
    }
  }

  # all oui lookups ##########################################################
  if ([related][oui]) {
    ruby {
      id => "ruby_related_oui_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][oui]"
      }
    }
  }

  # all users #################################################################
  if ([related][user]) {
    ruby {
      id => "ruby_related_user_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][user]"
      }
    }
  }

  # network protocol (service) version ########################################
  if ([network][protocol_version]) {
    ruby {
      id => "ruby_network_protocol_version_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[network][protocol_version]"
      }
    }
  }

  # action and result #########################################################
  if ([event][action]) {
    ruby {
      id => "ruby_event_action_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[event][action]"
      }
    }
  }

  if ([event][result]) {
    ruby {
      id => "ruby_zeek_result_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[event][result]"
      }
    }
  }

  # event ID(s) ###############################################################
  if ([event][id]) {
    ruby {
      id => "ruby_event_id_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[event][id]"
      }
    }
  }

  # file mime type ############################################################
  if ([file][mime_type]) {
    ruby {
      id => "ruby_file_mime_type_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[file][mime_type]"
      }
    }
  }

  # file path #################################################################
  if ([file][path]) {
    ruby {
      id => "ruby_zeek_filename_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[file][path]"
      }
    }
  }

  # deduplicate and count tags ################################################
  ruby {
    id => "ruby_tags_deduplicate"
    path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
    script_params => {
      "field" => "tags"
    }
  }
  ruby {
    id => "ruby_enrichment_tagsCnt"
    path => "/usr/share/logstash/malcolm-ruby/add_count_field.rb"
    script_params => {
      "source" => "[tags]"
      "target" => "[tagsCnt]"
    }
  }
  mutate {
    id => "mutate_convert_enrichment_tagsCnt"
    convert => { "[tagsCnt]" => "integer" }
  }

}
